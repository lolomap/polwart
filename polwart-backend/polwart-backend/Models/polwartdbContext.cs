// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace polwart_backend.Models;

public partial class polwartdbContext : DbContext
{
    public polwartdbContext(DbContextOptions<polwartdbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Chat> Chats { get; set; }

    public virtual DbSet<ChatMessage> ChatMessages { get; set; }

    public virtual DbSet<History> Histories { get; set; }

    public virtual DbSet<Space> Spaces { get; set; }

    public virtual DbSet<SpaceArchived> SpaceArchiveds { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Chat>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("chat_pkey");

            entity.ToTable("chat");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id");
        });

        modelBuilder.Entity<ChatMessage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("chat_message_pkey");

            entity.ToTable("chat_message");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id");
            entity.Property(e => e.ChatId).HasColumnName("chat_id");
            entity.Property(e => e.Tag).HasColumnName("tag");
            entity.Property(e => e.Text)
                .IsRequired()
                .HasColumnName("text");
            entity.Property(e => e.Time).HasColumnName("time");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Chat).WithMany(p => p.ChatMessages)
                .HasForeignKey(d => d.ChatId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("chat_message_chat_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.ChatMessages)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("chat_message_user_id_fkey");
        });

        modelBuilder.Entity<History>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("history_pkey");

            entity.ToTable("history");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id");
            entity.Property(e => e.FramesId).HasColumnName("frames_id");
        });

        modelBuilder.Entity<Space>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("space_pkey");

            entity.ToTable("space");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id");
            entity.Property(e => e.ChatAdminId).HasColumnName("chat_admin_id");
            entity.Property(e => e.ChatCommonId).HasColumnName("chat_common_id");
            entity.Property(e => e.Countries)
                .HasColumnType("json")
                .HasColumnName("countries");
            entity.Property(e => e.Entities)
                .HasColumnType("json")
                .HasColumnName("entities");
            entity.Property(e => e.Events)
                .HasColumnType("json")
                .HasColumnName("events");
            entity.Property(e => e.Faq)
                .HasColumnType("json")
                .HasColumnName("faq");
            entity.Property(e => e.HistoryId).HasColumnName("history_id");
            entity.Property(e => e.Layers)
                .HasColumnType("json")
                .HasColumnName("layers");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.OwnerId).HasColumnName("owner_id");
            entity.Property(e => e.Password).HasColumnName("password");

            entity.HasOne(d => d.ChatAdmin).WithMany(p => p.SpaceChatAdmins)
                .HasForeignKey(d => d.ChatAdminId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("space_chat_admin_id_fkey");

            entity.HasOne(d => d.ChatCommon).WithMany(p => p.SpaceChatCommons)
                .HasForeignKey(d => d.ChatCommonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("space_chat_common_id_fkey");

            entity.HasOne(d => d.History).WithMany(p => p.Spaces)
                .HasForeignKey(d => d.HistoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("space_history_id_fkey");

            entity.HasOne(d => d.Owner).WithMany(p => p.Spaces)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("space_owner_id_fkey");
        });

        modelBuilder.Entity<SpaceArchived>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("space_archived_pkey");

            entity.ToTable("space_archived");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id");
            entity.Property(e => e.Countries)
                .HasColumnType("json")
                .HasColumnName("countries");
            entity.Property(e => e.FixationTime)
                .IsRequired()
                .HasColumnName("fixation_time");
            entity.Property(e => e.Layers)
                .HasColumnType("json")
                .HasColumnName("layers");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("user_pkey");

            entity.ToTable("user");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id");
            entity.Property(e => e.Login)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("login");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
            entity.Property(e => e.Password).HasColumnName("password");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}